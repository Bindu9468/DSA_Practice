class Solution {
    public int[] searchRange(int[] nums, int target) {
        int first=findpos(nums, target, true);
        int last=findpos(nums,target, false);
        return new int[] {first, last};
    }
    private int findpos(int[] nums, int target, boolean find){
        int ans=-1;
        int start=0;
        int end=nums.length-1;

        while(start <= end){
            int mid = start+(end-start) / 2;
            
            if(nums[mid] == target){
                ans= mid;
                if(find){
                    end=mid-1;
                }
                else{
                    start=mid+1;
                }
            }
            else if(nums[mid] < target){
                start=mid+1;
            }
            else{
                end=mid-1;
            }

        }
        return ans;
    } 
}

✅ Use Binary Search twice — once for first position, once for last position.
✅ Time Complexity: O(log n)
Space Complexity =  O(1)